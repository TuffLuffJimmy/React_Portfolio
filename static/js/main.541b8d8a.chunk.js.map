{"version":3,"sources":["components/MyCard/MyCard.jsx","pages/Portfolio/Portfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["MyCard","props","console","log","Card","Img","variant","src","image","style","width","height","Body","Title","Text","description","href","link","Button","Portfolio","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNA6BeA,EA1BA,SAACC,GAEf,OADAC,QAAQC,IAAIF,GAEX,6BAKC,kBAACG,EAAA,EAAD,KACC,kBAACA,EAAA,EAAKC,IAAN,CACCC,QAAQ,MACRC,IAAKN,EAAMO,MACXC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAElC,kBAACP,EAAA,EAAKQ,KAAN,KACC,kBAACR,EAAA,EAAKS,MAAN,KAAaZ,EAAMY,OACnB,kBAACT,EAAA,EAAKU,KAAN,KAAYb,EAAMc,aAClB,uBAAGC,KAAMf,EAAMgB,MACd,kBAACC,EAAA,EAAD,CAAQZ,QAAQ,WAAhB,sBCJSa,EAdG,WACjB,OACC,oCACC,yCACA,kBAAC,EAAD,CACCC,MAAM,SACNL,YAAY,qBACZE,KAAK,0CACLT,MAAM,+E,KCkBKa,MAvBf,WACC,OAgBG,6BACE,kBAAC,EAAD,QCZcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.541b8d8a.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Card } from 'react-bootstrap'\n\nconst MyCard = (props) => {\n\tconsole.log(props)\n\treturn (\n\t\t<div>\n\t\t\t{/* <h1>{props.title}</h1>\n\t\t\t<h3>{props.link}</h3>\n\t\t\t<p>{props.description}</p> */}\n\n\t\t\t<Card>\n\t\t\t\t<Card.Img\n\t\t\t\t\tvariant=\"top\"\n\t\t\t\t\tsrc={props.image}\n\t\t\t\t\tstyle={{ width: '400px', height: '400px' }}\n\t\t\t\t/>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<Card.Title>{props.Title}</Card.Title>\n\t\t\t\t\t<Card.Text>{props.description}</Card.Text>\n\t\t\t\t\t<a href={props.link}>\n\t\t\t\t\t\t<Button variant=\"primary\">Go to Project</Button>\n\t\t\t\t\t</a>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t</div>\n\t)\n}\n\nexport default MyCard\n","import React from 'react'\nimport MyCard from '../../components/MyCard'\n\nconst Portfolio = () => {\n\treturn (\n\t\t<>\n\t\t\t<h1>Portfolio</h1>\n\t\t\t<MyCard\n\t\t\t\ttitle=\"CoZone\"\n\t\t\t\tdescription=\"CoZone Description\"\n\t\t\t\tlink=\"https://tuffluffjimmy.github.io/CoZone/\"\n\t\t\t\timage=\"https://tuffluffjimmy.github.io/responsive_design2/resources/meinard.JPG\"\n\t\t\t/>\n\t\t</>\n\t)\n}\n\nexport default Portfolio\n","import React from 'react'\nimport { Switch, Link, Route, BrowserRouter as Router } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Portfolio from './pages/Portfolio'\nimport NavBar from './components/NavBar'\n\nfunction App() {\n\treturn (\n\t\t// <Router>\n\t\t// \t<div>\n\t\t// \t\t<nav>\n    //       <NavBar />\n    //     </nav>\n\t\t// \t\t<Switch>\n\t\t// \t\t\t<Route exact path=\"/\">\n\t\t// \t\t\t\t<Home />\n\t\t// \t\t\t</Route>\n\t\t// \t\t\t<Route path=\"/portfolio\">\n\t\t// \t\t\t\t<Portfolio />\n\t\t// \t\t\t</Route>\n\t\t// \t\t</Switch>\n\t\t// \t</div>\n    // </Router>\n    <div>\n      <Portfolio />\n    </div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}